# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'image.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PIL.Image import Image
from PIL import Image
from PyQt5.QtWidgets import QMainWindow, QApplication,QFileDialog,QMessageBox
from PyQt5.QtGui import QPixmap
import sys
from PIL.ImageQt import ImageQt
from process import MidlineDrawing, colorationDetection, gumDetection, template, ApplyColoration

class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(842, 618)
        MainWindow.setStyleSheet("background-color: rgb(0, 85, 255);\n"
"background-color: rgb(85, 85, 127);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.ColorationBox = QtWidgets.QSpinBox(self.centralwidget)
        self.ColorationBox.setMinimum(1)
        self.ColorationBox.setMaximum(4)
        self.ColorationBox.setObjectName("ColorationBox")
        self.gridLayout.addWidget(self.ColorationBox, 3, 0, 1, 1)
        self.colorationButton = QtWidgets.QPushButton(self.centralwidget)
        self.colorationButton.setObjectName("colorationButton")
        self.gridLayout.addWidget(self.colorationButton, 4, 0, 1, 1)
        self.horizontalGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.horizontalGroupBox.setMaximumSize(QtCore.QSize(16777215, 100))
        self.horizontalGroupBox.setStyleSheet("border-color: rgb(0, 0, 0);")
        self.horizontalGroupBox.setObjectName("horizontalGroupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalGroupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.open_file = QtWidgets.QPushButton(self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_file.sizePolicy().hasHeightForWidth())
        self.open_file.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.open_file.setFont(font)
        self.open_file.setStyleSheet("\n"
"background-color: rgb(0, 85, 0);\n"
"background-color: rgb(0, 0, 255);\n"
"color: rgb(0, 0, 0);")
        self.open_file.setObjectName("open_file")
        self.horizontalLayout.addWidget(self.open_file)
        self.midline = QtWidgets.QPushButton(self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.midline.sizePolicy().hasHeightForWidth())
        self.midline.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.midline.setFont(font)
        self.midline.setStyleSheet("\n"
"background-color: rgb(0, 85, 0);\n"
"background-color: rgb(0, 0, 255);\n"
"color: rgb(0, 0, 0);\n"
"")
        self.midline.setObjectName("midline")
        self.horizontalLayout.addWidget(self.midline)
        self.TestsButton = QtWidgets.QPushButton(self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TestsButton.sizePolicy().hasHeightForWidth())
        self.TestsButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.TestsButton.setFont(font)
        self.TestsButton.setStyleSheet("\n"
"background-color: rgb(0, 85, 0);\n"
"background-color: rgb(0, 0, 255);\n"
"color: rgb(0, 0, 0);")
        self.TestsButton.setObjectName("TestsButton")
        self.horizontalLayout.addWidget(self.TestsButton)
        self.gridLayout.addWidget(self.horizontalGroupBox, 2, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label.setText("")
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.gridLayout.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
        self.TemplateBox = QtWidgets.QSpinBox(self.centralwidget)
        self.TemplateBox.setMinimum(1)
        self.TemplateBox.setMaximum(8)
        self.TemplateBox.setObjectName("TemplateBox")
        self.gridLayout.addWidget(self.TemplateBox, 5, 0, 1, 1)
        self.TemplateButton = QtWidgets.QPushButton(self.centralwidget)
        self.TemplateButton.setObjectName("TemplateButton")
        self.gridLayout.addWidget(self.TemplateButton, 6, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 842, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actioncoloration = QtWidgets.QAction(MainWindow)
        self.actioncoloration.setObjectName("actioncoloration")
        self.actionMid_Line = QtWidgets.QAction(MainWindow)
        self.actionMid_Line.setObjectName("actionMid_Line")
        self.open_file.clicked.connect(self.open_image)
        self.TemplateButton.clicked.connect(self.add_template)
        self.colorationButton.clicked.connect(self.add_coloration)
        self.TestsButton.clicked.connect(self.Tests)
        self.midline.clicked.connect(self.MidlineDraw)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.colorationButton.setText(_translate("MainWindow", "apply coloration"))
        self.open_file.setText(_translate("MainWindow", "Open File"))
        self.midline.setText(_translate("MainWindow", "Mid Line"))
        self.TestsButton.setText(_translate("MainWindow", "Tests"))
        self.TemplateButton.setText(_translate("MainWindow", "apply Template"))
        self.actionopen.setText(_translate("MainWindow", "open"))
        self.actioncoloration.setText(_translate("MainWindow", "coloration"))
        self.actionMid_Line.setText(_translate("MainWindow", "Mid Line"))
    
    def open_image(self):
                
        self.fname = QFileDialog.getOpenFileName(self, "Open File", "c:\\gui\\images", "All Files (*);;PNG Files (*.png);;Jpg Files (*.jpg)" )
        #Open The Image
        self.img = Image.open(self.fname[0])
        
        self.qimage = ImageQt(self.img)
        self.pixmap = QPixmap.fromImage(self.qimage)
        # Add Pic to label
        self.label.setPixmap(self.pixmap)

    def add_template(self):

        self.tempid=self.TemplateBox.value()
        if(self.tempid ==1):
                tempfname ='temp1.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==2):
                tempfname ='temp2.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==3):
                tempfname ='temp3.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==4):
                tempfname ='temp4.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==5):
                tempfname ='lines1.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==6):
                tempfname ='lines2.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==7):
                tempfname ='lines3.png'
                self.imgtemp =template(self.fname[0],tempfname)
        elif(self.tempid ==8):
                tempfname ='lines4.png'   
                self.imgtemp =template(self.fname[0],tempfname)

        self.qimage = ImageQt(self.imgtemp)
        self.pixmap = QPixmap.fromImage(self.qimage)
        # Add Pic to label
        self.label.setPixmap(self.pixmap) 

    def add_coloration(self):
        self.colorid=self.ColorationBox.value()
        if(self.colorid ==1):
                self.coloimg=ApplyColoration(self.fname[0],0)
        elif(self.colorid ==2):
                self.coloimg=ApplyColoration(self.fname[0],1)
        elif(self.colorid ==3):
                self.coloimg=ApplyColoration(self.fname[0],2)
        elif(self.colorid ==4):
                self.coloimg=ApplyColoration(self.fname[0],3)

        self.qimage = ImageQt(self.coloimg)
        self.pixmap = QPixmap.fromImage(self.qimage)
        # Add Pic to label
        self.label.setPixmap(self.pixmap) 
        
    def Tests(self):
        gummyid = gumDetection(self.fname[0])
        if (gummyid ==0):
                gummystr ="Not gummy Teeth"
        else:
                gummystr ="Gummy Teeth"
        testsStr ="Gummy Test :"+str(gummystr) + "\n"
        colorationid =colorationDetection(self.fname[0])
        if (colorationid <0.2):
                colorationStr = "coloration Result : "+"Discoloration Found \n"
        else:
                colorationStr = "coloration Result : "+"NO Discoloration Found \n"
                
        testsStr += colorationStr
        print(testsStr)
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(testsStr)
        returnValue = msgBox.exec()

    def MidlineDraw(self):
        self.midimg=MidlineDrawing(self.fname[0])
        self.qimage = ImageQt(self.midimg)
        self.pixmap = QPixmap.fromImage(self.qimage)
        # Add Pic to label
        self.label.setPixmap(self.pixmap) 

if __name__ =="__main__":
    app = QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui= Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())