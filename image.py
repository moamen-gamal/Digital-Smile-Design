# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'image.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PIL.Image import Image
from PIL import Image
from PyQt5.QtWidgets import QMainWindow, QApplication,QFileDialog,QMessageBox
from PyQt5.QtGui import QPixmap
import sys
from process import ApplyColoration, gumDetection, process ,colorationDetect, template,gapDetection
from PIL import Image
from PIL.ImageQt import ImageQt
import cv2
import mediapipe as mp
import numpy as np
from PIL import Image

class Ui_MainWindow(QMainWindow):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(836, 584)
                MainWindow.setStyleSheet("background-color: rgb(52,73,85);\n"
        "background-color: rgb(52,73,85);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
                self.gridLayout.setObjectName("gridLayout")
                self.horizontalGroupBox = QtWidgets.QGroupBox(self.centralwidget)
                self.horizontalGroupBox.setMaximumSize(QtCore.QSize(16777215, 100))
                self.horizontalGroupBox.setStyleSheet("border-color: rgb(0, 0, 0);")
                self.horizontalGroupBox.setObjectName("horizontalGroupBox")
                self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalGroupBox)
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.open_file = QtWidgets.QPushButton(self.horizontalGroupBox)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.open_file.sizePolicy().hasHeightForWidth())
                self.open_file.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setPointSize(16)
                self.open_file.setFont(font)
                self.open_file.setStyleSheet("\n"
        "background-color: rgb(0, 85, 0);\n"
        "background-color: rgb(249,170,51);\n"
        "color: rgb(255, 255, 255);")
                self.open_file.setObjectName("open_file")
                self.horizontalLayout.addWidget(self.open_file)
                self.midline = QtWidgets.QPushButton(self.horizontalGroupBox)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.midline.sizePolicy().hasHeightForWidth())
                self.midline.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setPointSize(16)
                self.midline.setFont(font)
                self.midline.setStyleSheet("\n"
        "background-color: rgb(0, 85, 0);\n"
        "background-color: rgb(249,170,51);\n"
        "color: rgb(255,255, 255);\n"
        "")
                self.midline.setObjectName("midline")
                self.horizontalLayout.addWidget(self.midline)
                self.coloration = QtWidgets.QPushButton(self.horizontalGroupBox)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.coloration.sizePolicy().hasHeightForWidth())
                self.coloration.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setPointSize(16)
                self.coloration.setFont(font)
                self.coloration.setStyleSheet("\n"
        "background-color: rgb(0, 85, 0);\n"
        "background-color: rgb(249,170,51);\n"
        "color: rgb(255, 255, 255);")
                self.coloration.setObjectName("coloration")
                self.horizontalLayout.addWidget(self.coloration)
                self.gridLayout.addWidget(self.horizontalGroupBox, 2, 0, 1, 1)
                self.verticalLayout_2 = QtWidgets.QVBoxLayout()
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.label = QtWidgets.QLabel(self.centralwidget)
                self.label.setStyleSheet("background-color: rgb(0, 0, 0);")
                self.label.setText("")
                self.label.setAlignment(QtCore.Qt.AlignCenter)
                self.label.setObjectName("label")
                self.label.setScaledContents(1)
                self.verticalLayout_2.addWidget(self.label)
                self.gridLayout.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
                self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
                self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
                self.horizontalSlider.setObjectName("horizontalSlider")
                self.gridLayout.addWidget(self.horizontalSlider, 3, 0, 1, 1)
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 836, 25))
                self.menubar.setObjectName("menubar")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)
                self.actionopen = QtWidgets.QAction(MainWindow)
                self.actionopen.setObjectName("actionopen")
                self.actioncoloration = QtWidgets.QAction(MainWindow)
                self.actioncoloration.setObjectName("actioncoloration")
                self.actionMid_Line = QtWidgets.QAction(MainWindow)
                self.actionMid_Line.setObjectName("actionMid_Line")
                self.horizontalSlider.setMinimum(0)
                self.horizontalSlider.setMaximum(3)
                self.horizontalSlider.setValue(0)


                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)
                self.open_file.clicked.connect(self.open_image)
                self.midline.clicked.connect(self.midLineDetection)
                self.coloration.clicked.connect(self.colorationDetection)
                self.horizontalSlider.valueChanged.connect(self.slider_value_changes)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.open_file.setText(_translate("MainWindow", "Open File"))
                self.midline.setText(_translate("MainWindow", "Mid Line"))
                self.coloration.setText(_translate("MainWindow", "Coloration"))
                self.actionopen.setText(_translate("MainWindow", "open"))
                self.actioncoloration.setText(_translate("MainWindow", "coloration"))
                self.actionMid_Line.setText(_translate("MainWindow", "Mid Line"))

        def open_image(self):
                
                self.fname = QFileDialog.getOpenFileName(self, "Open File", "c:\\gui\\images", "All Files (*);;PNG Files (*.png);;Jpg Files (*.jpg)" )
                #Open The Image
                self.img = Image.open(self.fname[0])
                
                self.qimage = ImageQt(self.img)
                self.pixmap = QPixmap.fromImage(self.qimage)
                # Add Pic to label
                self.label.setPixmap(self.pixmap) 

        def midLineDetection(self):
                self.imgs= process(self.fname[0])
                self.qimage = ImageQt(self.imgs[0])
                self.pixmap = QPixmap.fromImage(self.qimage)
                # Add Pic to label
                self.label.setPixmap(self.pixmap)

        def colorationDetection(self):
                result =colorationDetect(self.fname[0],self.imgs,self.img)
                result = 0
                msg =QMessageBox()
                msg.setWindowTitle("Result")
                if result ==0:
                        msg.setText("Discoloaration Found")
                else:
                        msg.setText("No Discoloaration Found")
                x = msg.exec_()
                
                ApplyColoration(self.fname[0],self.horizontalSlider.value())
                template(self.fname[0])
                #gapDetection(self.fname[0])
                gumDetection()
        def slider_value_changes(self):
                value =self.horizontalSlider.value()
                ApplyColoration(self.fname[0],value)

if __name__ =="__main__":
    app = QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui= Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())


